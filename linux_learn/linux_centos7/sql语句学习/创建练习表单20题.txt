-- SELECT st.s_name,co.c_name,sc.s_score FROM student st, score sc, course co WHERE st.s_id=sc.s_id AND sc.c_id=co.c_id AND ;
-- 1、查询"01"课程比"02"课程成绩高的学生的信息及课程分数 
-- select * from student st left join score sc on sc.s_id=st.s_id and sc.c_id='01'  left join score sc2 on sc2.s_id=st.s_id and sc2.c_id='02' 
-- where sc.s_score>sc2.s_score;

-- 2、查询"01"课程比"02"课程成绩低的学生的信息及课程分数
-- SELECT * FROM student st LEFT JOIN score sc ON st.s_id=sc.s_id AND sc.c_id='01' LEFT JOIN score sc1 ON st.s_id=sc1.s_id AND sc1.c_id='02'
-- WHERE sc.s_score<sc1.s_score;

-- 3、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩
-- select st.*, SUM(sc.s_score) '成绩总和', ROUND(AVG(sc.s_score),2) '平均成绩' from student st
-- left join score sc on sc.s_id=st.s_id
-- GROUP BY st.s_id HAVING ROUND(AVG(sc.s_score),2) >= 60;
--  SUM和AVG函数不加GROUP BY会报错。ROUND(X,2)表示转化为最多带2位小数的浮点数。having条件分组后，where条件分组前。

-- 4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩。(包括有成绩的和无成绩的)
-- SELECT st.*,AVG(sc.s_score),COUNT(sc.s_score) FROM student st LEFT JOIN score sc on st.s_id=sc.s_id
-- GROUP BY st.s_id HAVING AVG(sc.s_score)<60 OR AVG(sc.s_score) is NULL;

-- 5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩
-- SELECT st.s_id,st.s_name,COUNT(co.c_name),SUM(sc.s_score) FROM student st LEFT JOIN score sc ON st.s_id=sc.s_id LEFT JOIN course co ON co.c_id=sc.c_id
-- GROUP BY st.s_id;
-- -- 
-- select st.s_id,st.s_name,count(sc.c_id) "选课总数",sum(case when sc.s_score is null then 0 else sc.s_score end) "总成绩" 
-- from student st 
-- left join score sc on st.s_id = sc.s_id 
-- group by st.s_id
-- 

-- 6、查询"李"姓老师的数量
-- select t.t_name,count(t.t_id) from teacher t
-- group by t.t_id having t.t_name like "李%"; 
-- 有问题，不知道如何统计结果表有多少条。未解决

-- 7、查询学过"张三"老师授课的同学的信息
-- SELECT te.t_name,co.c_name,st.s_name FROM teacher te LEFT JOIN course co ON te.t_id=co.t_id LEFT JOIN score sc ON co.c_id=sc.c_id LEFT JOIN student st ON sc.s_id=st.s_id
-- WHERE te.t_name='张三';
-- 
-- select st.* from student st 
-- left join score sc on sc.s_id=st.s_id
-- left join course c on c.c_id=sc.c_id
-- left join teacher t on t.t_id=c.t_id
--  where t.t_name="张三"

-- 8、查询没学过"张三"老师授课的同学的信息
-- 张三老师教的课
-- select c.* from course c left join teacher t on t.t_id=c.t_id where  t.t_name="张三";
--  -- 有张三老师课成绩的st.s_id
--  select sc.s_id from score sc where sc.c_id in (select c.c_id from course c left join teacher t on t.t_id=c.t_id where  t.t_name="张三");
--  -- 不在上面查到的st.s_id的学生信息,即没学过张三老师授课的同学信息
--  select st.* from student st where st.s_id not in(
--   select sc.s_id from score sc where sc.c_id in (select c.c_id from course c left join teacher t on t.t_id=c.t_id where  t.t_name="张三"));

-- 9、查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息
-- 学过01课的同学
-- select st.* from student st left join score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id where sc.c_id='01';
-- -- 学过02课的同学
-- select st.* from student st left join score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id where sc.c_id='02';
-- --  学过02课，且学过01课的同学
-- select st.* from student st 
-- where st.s_id in (select st.s_id from student st left join score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id where sc.c_id='01')
-- AND st.s_id in (select st.s_id from student st left join score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id where sc.c_id='02');
-- 
-- select * from student where s_id in (
-- select st.s_id from student st inner join score sc on sc.s_id = st.s_id and sc.c_id="01"
-- where st.s_id  in (select st1.s_id from student st1 inner join score sc2 on sc2.s_id = st1.s_id and sc2.c_id="02"));
-- 
-- select st.* from student st 
-- inner join score sc on sc.s_id = st.s_id
-- inner join course c on c.c_id=sc.c_id and c.c_id="01"
-- where st.s_id in (
-- select st2.s_id from student st2 
-- inner join score sc2 on sc2.s_id = st2.s_id
-- inner join course c2 on c2.c_id=sc2.c_id and c2.c_id="02"
-- );
-- 
-- select a.* 
-- from
--     student a,
--     score b,
--     score c
-- where
--     a.s_id = b.s_id
--     and a.s_id = c.s_id
--     and b.c_id = '01'
--     and c.c_id = '02';

-- 10、查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息
-- select st.* from student st 
-- where st.s_id in (select st.s_id from student st left join score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id where sc.c_id='01')
-- AND st.s_id not in (select st.s_id from student st left join score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id where sc.c_id='02');
-- 
-- select * from student where s_id in (
-- select st.s_id from student st inner join score sc on sc.s_id = st.s_id and sc.c_id="01"
-- where st.s_id  not in (select st1.s_id from student st1 inner join score sc2 on sc2.s_id = st1.s_id and sc2.c_id="02")
-- );
-- 
-- 
-- select st.* from student st 
-- inner join score sc on sc.s_id = st.s_id
-- inner join course c on c.c_id=sc.c_id and c.c_id="01"
-- where st.s_id not in (
-- select st2.s_id from student st2 
-- inner join score sc2 on sc2.s_id = st2.s_id
-- inner join course c2 on c2.c_id=sc2.c_id and c2.c_id="02");

-- 11、查询没有学全所有课程的同学的信息
-- select a.*
-- from student a
-- left join score b on a.s_id = b.s_id
-- group by
-- a.s_id
-- having
-- count(b.c_id) < '3';
-- 
-- select * from student where s_id not in (
-- select st.s_id from student st inner join score sc on sc.s_id = st.s_id and sc.c_id="01"
-- where st.s_id  in (select st1.s_id from student st1 inner join score sc2 on sc2.s_id = st1.s_id and sc2.c_id="02") 
-- and st.s_id in (select st2.s_id from student st2 inner join score sc2 on sc2.s_id = st2.s_id and sc2.c_id="03")
-- );

-- 12、查询至少有一门课与学号为"01"的同学所学相同的同学的信息
-- 找到01同学学的所有课程
-- SELECT co.c_id FROM student st LEFT JOIN score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id
-- WHERE st.s_id='01';
-- 
-- SELECT DISTINCT st.* FROM student st LEFT JOIN score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id
-- WHERE co.c_id in (
-- 			SELECT co.c_id FROM student st LEFT JOIN score sc ON st.s_id=sc.s_id LEFT JOIN course co ON sc.c_id=co.c_id
-- 			WHERE st.s_id='01'
-- ) AND st.s_id != '01';
-- 
-- 
-- select distinct st.* from student st 
-- left join score sc on sc.s_id=st.s_id
-- where sc.c_id in (
-- select sc2.c_id from student st2
-- left join score sc2 on sc2.s_id=st2.s_id
-- where st2.s_id ='01');

-- 13、查询和"01"号的同学学习的课程完全相同的其他同学的信息
-- 把01号同学学的课程分组合并
-- select  group_concat(sc2.c_id) from student st2
-- left join score sc2 on sc2.s_id=st2.s_id  where st2.s_id ='01';
-- 
-- select  st.* from student st
-- left join score sc on sc.s_id=st.s_id
-- GROUP BY st.s_id
-- HAVING group_concat(sc.c_id)=(
-- select  group_concat(sc2.c_id) from student st2
-- left join score sc2 on sc2.s_id=st2.s_id
-- where st2.s_id ='01');

-- 14、查询没学过"张三"老师讲授的任一门课程的学生姓名
-- -- 学过张三老师教的学生
-- SELECT sc.s_id FROM teacher te LEFT JOIN course co1 ON te.t_id=co1.t_id LEFT JOIN score sc ON co1.c_id=sc.c_id
-- WHERE te.t_name='张三'
-- 
-- select DISTINCT st.*
-- from student st
-- WHERE st.s_id not in (
-- SELECT sc.s_id FROM teacher te LEFT JOIN course co1 ON te.t_id=co1.t_id LEFT JOIN score sc ON co1.c_id=sc.c_id
-- WHERE te.t_name='张三')；
-- 
-- select st.s_name from student st 
-- where st.s_id not in (
-- select sc.s_id from score sc 
-- inner join course c on c.c_id=sc.c_id
-- inner join teacher t on t.t_id=c.t_id and t.t_name="张三")；

-- 15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
-- 查询成绩为空或不及格数大于2的学生id
-- select sc.s_id from score sc 
-- where sc.s_score<60 or sc.s_score is NULL
-- group by sc.s_id having COUNT(1)>=2
-- ;
-- 
-- SELECT st.*,AVG(sc1.s_score) FROM student st LEFT JOIN score sc1 ON st.s_id=sc1.s_id
-- WHERE st.s_id in (
-- select sc.s_id from score sc 
-- where sc.s_score<60 or sc.s_score is NULL
-- group by sc.s_id having COUNT(1)>=2)
-- GROUP BY st.s_id;

-- 16、检索"01"课程分数小于60，按分数降序排列的学生信息
-- 查出01课程小于60的学生id
-- SELECT sc.s_id FROM score sc WHERE sc.c_id='01' AND sc.s_score<60;
-- 
-- SELECT st.*,sc.s_score
-- FROM student st
-- LEFT JOIN score sc ON st.s_id=sc.s_id
-- WHERE sc.c_id='01' AND sc.s_score<60
-- ORDER BY sc.s_score DESC;
-- 
-- select st.*,sc.s_score from student st 
-- inner join score sc on sc.s_id=st.s_id and sc.c_id="01" and sc.s_score<60
-- order by sc.s_score desc 

-- 17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
-- 按平均成绩从高到底排序
-- SELECT st.*,AVG(sc.s_score) FROM student st LEFT JOIN score sc ON st.s_id=sc.s_id
-- GROUP BY st.s_id
-- ORDER BY AVG(sc.s_score) DESC;
-- 
-- select st.s_id,st.s_name,avg(sc4.s_score) "平均分",sc.s_score "语文",sc2.s_score "数学",sc3.s_score "英语" from student st
-- left join score sc  on sc.s_id=st.s_id  and sc.c_id="01"
-- left join score sc2 on sc2.s_id=st.s_id and sc2.c_id="02"
-- left join score sc3 on sc3.s_id=st.s_id and sc3.c_id="03"
-- left join score sc4 on sc4.s_id=st.s_id
-- group by st.s_id 
-- order by avg(sc4.s_score) desc
-- ;
-- 
-- 
-- select st.s_id,st.s_name,
-- (case when avg(sc4.s_score) is null then 0 else avg(sc4.s_score) end) "平均分",
-- (case when sc.s_score is null then 0 else sc.s_score end) "语文",
-- (case when sc2.s_score is null then 0 else sc2.s_score end) "数学",
-- (case when sc3.s_score is null then 0 else sc3.s_score end) "英语" 
-- from student st
-- left join score sc  on sc.s_id=st.s_id  and sc.c_id="01"
-- left join score sc2 on sc2.s_id=st.s_id and sc2.c_id="02"
-- left join score sc3 on sc3.s_id=st.s_id and sc3.c_id="03"
-- left join score sc4 on sc4.s_id=st.s_id
-- group by st.s_id 
-- order by avg(sc4.s_score) desc
-- ;

-- 18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
-- 及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90
-- SELECT co.c_id,co.c_name,MAX(sc.s_score) '最高分',MIN(sc.s_score) '最低分',AVG(sc.s_score) '平均分',
-- ((select count(s_id) from score where s_score>=60 and c_id=co.c_id )/(select count(s_id) from score where c_id=co.c_id)) "及格率",
-- ((select count(s_id) from score where s_score<60 and c_id=co.c_id )/(select count(s_id) from score where c_id=co.c_id)) "不及格率",
-- ((select count(s_id) from score where s_score>=70 and  s_score<=80 and c_id=co.c_id )/(select count(s_id) from score where c_id=co.c_id)) "中等率",
-- ((select count(s_id) from score where s_score>=80 and  s_score<=80 and c_id=co.c_id )/(select count(s_id) from score where c_id=co.c_id)) "优良率",
-- ((select count(s_id) from score where s_score>=90 and c_id=co.c_id )/(select count(s_id) from score where c_id=co.c_id)) "优秀率"
-- FROM course co LEFT JOIN score sc ON co.c_id=sc.c_id
-- GROUP BY co.c_id;

-- 20、查询学生的总成绩并进行排名
-- SELECT st.*,MAX(sc.s_score) '最高分',MIN(sc.s_score) '最低分',AVG(sc.s_score) '平均分',
-- SUM(sc.s_score)-- 或者(AVG(sc.s_score)*(select count(s_id) from score where s_id=st.s_id)) "总成绩"  -- 或者 SUM(sc.s_score)
-- FROM student st LEFT JOIN score sc ON st.s_id=sc.s_id
-- GROUP BY st.s_id
-- ORDER BY (AVG(sc.s_score)*(select count(s_id) from score where s_id=st.s_id)) DESC;
-- 
-- select st.s_id,st.s_name,
-- (case when sum(sc.s_score) is null then 0 else sum(sc.s_score) end)
-- from student st
-- left join score sc on sc.s_id=st.s_id
-- group by st.s_id order by sum(sc.s_score) desc;


-- 查询每个老师教的学科的总分
-- SELECT te.t_name,SUM(sc.s_score) 
-- FROM teacher te
-- INNER JOIN course co ON te.t_id=co.t_id
-- INNER JOIN score sc ON co.c_id=sc.c_id
-- GROUP BY te.t_id


-- 查询01成绩大于02成绩的学生
-- SELECT st.*
-- FROM student st
-- INNER JOIN score sc ON st.s_id=sc.s_id
-- WHERE st.s_id in (
-- SELECT sc.s_id
-- FROM score sc
-- WHERE ((SELECT s_score FROM score WHERE  sc.s_id=s_id AND c_id=01) > (SELECT s_score FROM score WHERE  sc.s_id=s_id AND c_id=02) )
-- )
-- GROUP BY st.s_id

-- SELECT sc.s_id
-- FROM score sc
-- WHERE ((SELECT s_score FROM score WHERE  sc.s_id=s_id AND c_id=01) > (SELECT s_score FROM score WHERE  sc.s_id=s_id AND c_id=02) )
-- 








