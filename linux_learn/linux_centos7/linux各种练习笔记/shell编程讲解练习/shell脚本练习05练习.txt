一、脚本练习

1、#######检查主机存活状态
[root@centos7 prac]# cat check_host_alive.sh 
#!/bin/bash
#this test for check host is alive or not
IP_LIST="192.168.0.1 192.168.8.87 192.168.8.86 192.168.8.11 192.168.7.87 192.168.9.87"
for ip in $IP_LIST;do
	num=1
	while [ $num -le 3 ];do
		if ping -c 1 $ip > /dev/null;then                         	####把ping命令执行的结果扔进黑洞（垃圾桶/dev/null）
			echo "$ip ping is successful"
			break
		else
			echo "$ip ping is failure $num"
			FALL_COUNT[$num]=$ip		####每次失败都会往FALL_COUNT传值
			let num++
		fi
	done
	if [ ${#FALL_COUNT[*]} -eq 3 ];then			####每ping列表的一个ip结束时判断num是否加到3（也就是判断FALL_COUNT的数量），到3则认为失败
		echo "${FALL_COUNT[1]} ping is failure"
		unset FALL_COUNT[*]			###释放FALL_COUNT（相当于清空）
	fi
done

或（改进版自己看）
#!/bin/bash
#this test for check host is alive or not
IP_LIST="192.168.0.1 192.168.8.87 192.168.8.86 192.168.8.11 192.168.7.87 192.168.9.87"
for ip in $IP_LIST;do
	num=0
	while [ $num -le 3 ];do
		if ping -c 1 $ip > /dev/null;then
			echo "$ip ping is successful"
			break
		else
			echo "$ip ping is failure $num"
			let num++
		fi
	done
	if [ $num -eq 3 ];then
		echo "${FALL_COUNT[1]} ping is failure"
	fi
done
或函数版本
#!/bin/bash
#this test for check host is alive or not
IP_LIST="192.168.0.1 192.168.8.87 192.168.8.86 192.168.8.11 192.168.7.87 192.168.9.87"
ping_func(){
if ping -c 1 $ip > /dev/null;then
	echo "$ip ping is successful"
	continue
fi
}

for ip in $IP_LIST;do
	ping_func
	ping_func
	ping_func
	echo "$ip ping is failure"
done

[root@centos7 prac]# sh check_host_alive.sh 
192.168.0.1 ping is failure 1
192.168.0.1 ping is failure 2
192.168.0.1 ping is failure 3
192.168.0.1 ping is failure
192.168.8.87 ping is successful
192.168.8.86 ping is successful
192.168.8.11 ping is failure 1
192.168.8.11 ping is failure 2
192.168.8.11 ping is failure 3
192.168.8.11 ping is failure
192.168.7.87 ping is failure 1
192.168.7.87 ping is failure 2
192.168.7.87 ping is failure 3
192.168.7.87 ping is failure
192.168.9.87 ping is failure 1
192.168.9.87 ping is failure 2
192.168.9.87 ping is failure 3
192.168.9.87 ping is failure



1、#######判断输入是否是IP
[root@centos7 prac]# cat ipaddr.sh 
#!/bin/bash
# this test for check ip addr is right or not
function check_ip {
        IP=$1
        VALID_CHECK=$(echo $IP|awk -F. '$1<=255&&$2<=255&&$3<=255&&$4<=255{print "Yes"}')   #####又是awk（感觉咋跟split一样）
        if echo $IP | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" > /dev/null;then
                if [ $VALID_CHECK == "Yes" ];then
                        echo "$IP is IPv4 addr"
                else
                        echo "$IP not IPv4 addr"
                fi
        else
                echo "$IP Format Error"
        fi
}
check_ip 192.168.1.1
check_ip 2662.2444.326.322
check_ip asddqdqd
check_ip a.a.a.a
check_ip 0..32.
check_ip 10.10.3.6

[root@centos7 prac]# sh ipaddr.sh 
192.168.1.1 is IPv4 addr
2662.2444.326.322 Format Error
asddqdqd Format Error
a.a.a.a Format Error
0..32. Format Error
10.10.3.6 is IPv4 addr


#######输入ip地址判断直到输入正确
[root@centos7 prac]# cat ipaddr1.sh 
#!/bin/bash
# this test for check ip addr is right or not
function check_ip {
        IP=$1
        VALID_CHECK=$(echo $IP|awk -F. '$1<=255&&$2<=255&&$3<=255&&$4<=255{print "Yes"}')  
        if echo $IP | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" > /dev/null;then
                if [ $VALID_CHECK == "Yes" ];then
                        echo "$IP is IPv4 addr"
			return 0
                else
                        echo "$IP not IPv4 addr"
			return 1
                fi
        else
                echo "$IP Format Error"
		return 1
        fi
}

while true;do
	read -p "please input one ip addr:" IP
	check_ip $IP
	[ $? -eq 0 ] && break || continue
done

[root@centos7 prac]# sh ipaddr1.sh 
please input one ip addr:45
45 Format Error
please input one ip addr:cs15c5.51a51c
cs15c5.51a51c Format Error
please input one ip addr:198.26.36.3
198.26.36.3 is IPv4 addr
























































