## 第一题

	- 创建EXAMPLE数据库
		- CREATE DATABASE EXAMPLE default charset=utf8;
		- SHOW CREATE DATABASE EXAMPLE;
		- show databases;
		- USE EXAMPLE;
	- 创建studnet与grade表
		MariaDB [EXAMPLE]> CREATE TABLE student(
		    -> num INT(10) NOT NULL UNIQUE PRIMARY KEY,
		    -> name VARCHAR(20) NOT NULL,
		    -> sex VARCHAR(4) NOT NULL,
		    -> birthday DATETIME,
		    -> address VARCHAR(50)
		    -> );
		Query OK, 0 rows affected (0.01 sec)
		
		MariaDB [EXAMPLE]> show tables;
		+-------------------+
		| Tables_in_EXAMPLE |
		+-------------------+
		| student           |
		+-------------------+
		1 row in set (0.00 sec)
		
		MariaDB [EXAMPLE]> DESC student;
		+----------+-------------+------+-----+---------+-------+
		| Field    | Type        | Null | Key | Default | Extra |
		+----------+-------------+------+-----+---------+-------+
		| num      | int(10)     | NO   | PRI | NULL    |       |
		| name     | varchar(20) | NO   |     | NULL    |       |
		| sex      | varchar(4)  | NO   |     | NULL    |       |
		| birthday | datetime    | YES  |     | NULL    |       |
		| address  | varchar(50) | YES  |     | NULL    |       |
		+----------+-------------+------+-----+---------+-------+
		5 rows in set (0.01 sec)
		
		MariaDB [EXAMPLE]> 

		MariaDB [EXAMPLE]> CREATE TABLE grade(
		    -> id INT(10) NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT,
		    -> course VARCHAR(10) NOT NULL,
		    -> s_num INT(10) NOT NULL,
		    -> grade VARCHAR(4),
		    -> CONSTRAINT grade_fk  FOREIGN KEY(s_num) REFERENCES student(num)   #外键约束
		    -> );
		Query OK, 0 rows affected (0.02 sec)
		
		MariaDB [EXAMPLE]> DESC grade;
		+--------+-------------+------+-----+---------+----------------+
		| Field  | Type        | Null | Key | Default | Extra          |
		+--------+-------------+------+-----+---------+----------------+
		| id     | int(10)     | NO   | PRI | NULL    | auto_increment |
		| course | varchar(10) | NO   |     | NULL    |                |
		| s_num  | int(10)     | NO   | MUL | NULL    |                |
		| grade  | varchar(4)  | YES  |     | NULL    |                |
		+--------+-------------+------+-----+---------+----------------+
		4 rows in set (0.00 sec)
		
		MariaDB [EXAMPLE]> show create table grade\G
		*************************** 1. row ***************************
		       Table: grade
		Create Table: CREATE TABLE `grade` (
		  `id` int(10) NOT NULL AUTO_INCREMENT,
		  `course` varchar(10) NOT NULL,
		  `s_num` int(10) NOT NULL,
		  `grade` varchar(4) DEFAULT NULL,
		  PRIMARY KEY (`id`),
		  UNIQUE KEY `id` (`id`),
		  KEY `grade_fk` (`s_num`),
		  CONSTRAINT `grade_fk` FOREIGN KEY (`s_num`) REFERENCES `student` (`num`)
		) ENGINE=InnoDB DEFAULT CHARSET=utf8
		1 row in set (0.00 sec)
		
		MariaDB [EXAMPLE]> 


	- 将grade表的course字段数据类型改为VARCHAR（20）
		- ALTER TABLE grade MODIFY course VARCHAR(20);
		- DESC grade;
	- 将s_num字段的位置改到course字段的前面（也就是id字段的后面）
		- ALTER TABLE grade MODIFY s_num INT(10) AFTER id;
	- 将grade字段改为score
		- ALTER TABLE grade CHANGE grade score VARCHAR(4);
	- 删除表grade的外键约束
		- ALTER TABLE grade DROP FOREIGN KEY grade_fk;
	- 将grade表的存储引擎更改为MyISAM类型（要修改存储引擎必须先把外键约束先删除）
		- ALTER TABLE grade ENGINE=MyISAM;
	- 将student表的address字段删除
		- ALTER TABLE student DROP address;
	- 在student表中增加名为phone的字段，数据类型为INT(10)
		- ALTER TABLE student ADD phone INT(10);
	- 将grade表改名为gradeInfo
		- ALTER TABLE grade RENAME gradeInfo;
	- 删除student表
		- DROP TABLE student;





## 第二题
	创建相应的表结构
CREATE TABLE student(
id INT(10) NOT NULL UNIQUE PRIMARY KEY,
name VARCHAR(20) NOT NULL,
sex VARCHAR(4),
birth YEAR,
department VARCHAR(20) NOT NULL,
address VARCHAR(50)
);
		MariaDB [EXAMPLE]> CREATE TABLE student(
	    -> id INT(10) NOT NULL UNIQUE PRIMARY KEY,
	    -> name VARCHAR(20) NOT NULL,
	    -> sex VARCHAR(4),
	    -> birth YEAR,
	    -> department VARCHAR(20) NOT NULL,
	    -> address VARCHAR(50)
	    -> );
	Query OK, 0 rows affected (0.01 sec)
	
	MariaDB [EXAMPLE]> DESC student;
	+------------+-------------+------+-----+---------+-------+
	| Field      | Type        | Null | Key | Default | Extra |
	+------------+-------------+------+-----+---------+-------+
	| id         | int(10)     | NO   | PRI | NULL    |       |
	| name       | varchar(20) | NO   |     | NULL    |       |
	| sex        | varchar(4)  | YES  |     | NULL    |       |
	| birth      | year(4)     | YES  |     | NULL    |       |
	| department | varchar(20) | NO   |     | NULL    |       |
	| address    | varchar(50) | YES  |     | NULL    |       |
	+------------+-------------+------+-----+---------+-------+
	6 rows in set (0.01 sec)

CREATE TABLE score(
id INT(10) NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT,
stu_id INT(10) NOT NULL,
c_name VARCHAR(20),
grade INT(10)
);
	
	MariaDB [EXAMPLE]> CREATE TABLE score(
	    -> id INT(10) NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT,
	    -> stu_id INT(10) NOT NULL,
	    -> c_name VARCHAR(20),
	    -> grade INT(10)
	    -> );
	Query OK, 0 rows affected (0.01 sec)
	
	MariaDB [EXAMPLE]> DESC score;
	+--------+-------------+------+-----+---------+----------------+
	| Field  | Type        | Null | Key | Default | Extra          |
	+--------+-------------+------+-----+---------+----------------+
	| id     | int(10)     | NO   | PRI | NULL    | auto_increment |
	| stu_id | int(10)     | NO   |     | NULL    |                |
	| c_name | varchar(20) | YES  |     | NULL    |                |
	| grade  | int(10)     | YES  |     | NULL    |                |
	+--------+-------------+------+-----+---------+----------------+
	4 rows in set (0.00 sec)
	
	MariaDB [EXAMPLE]> 


	- 插入相关数据
INSERT INTO student VALUES(901,'张老大','男',1985,'计算机系','北京市海淀区');
INSERT INTO student VALUES(902,'张老二','男',1986,'中文系','北京市昌平区');
INSERT INTO student VALUES(903,'张三','女',1990,'中文系','湖南省永州市');
INSERT INTO student VALUES(904,'李四','男',1990,'英语系','辽宁省卓新区');
INSERT INTO student VALUES(905,'王五','女',1991,'英语系','福建省厦门市');
INSERT INTO student VALUES(906,'王六','男',1988,'计算机系','湖南省衡阳市');

INSERT INTO score VALUES(NULL,901,'计算机',98);
INSERT INTO score VALUES(NULL,901,'英语',80);
INSERT INTO score VALUES(NULL,902,'计算机',65);
INSERT INTO score VALUES(NULL,902,'中文',88);
INSERT INTO score VALUES(NULL,903,'中文',95);
INSERT INTO score VALUES(NULL,904,'计算机',70);
INSERT INTO score VALUES(NULL,904,'英语',92);
INSERT INTO score VALUES(NULL,905,'英语',94);
INSERT INTO score VALUES(NULL,906,'计算机',90);
INSERT INTO score VALUES(NULL,906,'英语',85);


	- 查询表的第二条到第四条记录
		- select * from student LIMIT 1,3;
		- select * from student LIMIT 5;
			- 1代表从第二条记录开始，3代表查询出三条记录
	- 查询student表的id,name,department
		- select id,name,department from student;
	- 查询student表中计算机系和英语系的学生信息
		- 俩种方法
			- SELECT * FROM student WHERE department='计算机系' OR department='英语系';
			- SELECT * FROM student WHERE department IN ('计算机系','英语系');
	- 从student表中查询年龄为18~22岁的学生
		- select name,2019-birth AS age FROM student;
		- SELECT id,name,sex,2019-birth AS age,department,address FROM student WHERE 2019-birth BETWEEN 28 AND 30;
		- SELECT id,name,sex,2019-birth AS age,department,address FROM student WHERE 2019-birth >= 28 AND 2019-birth<=30;
	- 从student表中查询每个系有多少人
		- SELECT department,COUNT(*) FROM student GROUP BY department;
	- 查询每个科目的最高分
		- SELECT c_name,MAX(grade) FROM score GROUP BY c_name;
	- 查询李四的考试科目和考试成绩
		- SELECT c_name,grade FROM score WHERE stu_id=(SELECT id FROM student WHERE name='李四');
	- 用连接查询的方式查询所有学生的信息和考试信息
		- SELECT student.id,name,sex,birth,department,address,c_name,grade FROM student,score WHERE student.id=score.stu_id;
		- SELECT * from student left join score on student.id=score.stu_id;
		- SELECT s1.id,name,sex,birth,department,address,c_name,grade FROM student s1,score s2  WHERE s1.id=s2.stu_id;
	- 计算每个学生的总成绩
		- SELECT stu_id,SUM(grade) FROM score GROUP BY stu_id;
		- SELECT student.id,name,SUM(grade) FROM student,score WHERE student.id=score.stu_id GROUP BY student.id;
	- 计算每个考试科目的平均成绩
		- SELECT c_name,AVG(grade) FROM score GROUP BY c_name;
	- 查询计算机成绩低于95的学生信息
		- SELECT * FROM student WHERE id IN (SELECT stu_id FROM score WHERE c_name='计算机' AND grade<95);
		- 遗留问题：如何将成绩添加进去
	- 查询同时参加计算机和英语考试的学生信息
		- SELECT * from student WHERE id=ANY(SELECT stu_id from score WHERE stu_id IN (SELECT stu_id from score WHERE c_name='计算机') AND c_name='英语');
	- 将计算机考试成绩按从高到底进行排序
		- SELECT stu_id,grade FROM score WHERE c_name='计算机' ORDER BY grade DESC;
	- 从student表和score表中查询学生的学号，然后合并查询结果
		- UNION
		- SELECT id FROM student UNION SELECT stu_id FROM score;
	- 查询姓张或者姓王的同学的姓名，院系和考试科目及成绩
		- SELECT student.id,name,sex,birth,department,address,c_name,grade FROM student,score WHERE (name LIKE '张%' OR name LIKE '王%') AND student.id=score.stu_id;
	- 查询都是湖南的同学的姓名，年龄，院系和考试科目及成绩
		- SELECT student.id,name,sex,birth,department,address,c_name,grade FROM student,score WHERE address LIKE '湖南%' AND student.id=score.stu_id;



## 表的插入更新删除练习
	创建表：
CREATE TABLE food(
id INT(10) NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(20) NOT NULL,
company VARCHAR(30) NOT NULL,
price FLOAT,
produce_time YEAR,
validity_time INT(4),
address VARCHAR(50)
);
			MariaDB [EXAMPLE]> CREATE TABLE food(
		    -> id INT(10) NOT NULL UNIQUE PRIMARY KEY AUTO_INCREMENT,
		    -> name VARCHAR(20) NOT NULL,
		    -> company VARCHAR(30) NOT NULL,
		    -> price FLOAT,
		    -> produce_time YEAR,
		    -> validity_time INT(4),
		    -> address VARCHAR(50)
		    -> );
		Query OK, 0 rows affected (0.00 sec)
		
		MariaDB [EXAMPLE]> DESC food;
		+---------------+-------------+------+-----+---------+----------------+
		| Field         | Type        | Null | Key | Default | Extra          |
		+---------------+-------------+------+-----+---------+----------------+
		| id            | int(10)     | NO   | PRI | NULL    | auto_increment |
		| name          | varchar(20) | NO   |     | NULL    |                |
		| company       | varchar(30) | NO   |     | NULL    |                |
		| price         | float       | YES  |     | NULL    |                |
		| produce_time  | year(4)     | YES  |     | NULL    |                |
		| validity_time | int(4)      | YES  |     | NULL    |                |
		| address       | varchar(50) | YES  |     | NULL    |                |
		+---------------+-------------+------+-----+---------+----------------+
		7 rows in set (0.00 sec)
		
		MariaDB [EXAMPLE]> 
	- 插入数据
INSERT INTO food VALUES(1,'AA饼干','AA饼干厂',2.5,'2008',3,'北京');
INSERT INTO food VALUES(2,'CC牛奶','CC牛奶厂',3.5,'2009',1,' 河北');
INSERT INTO food VALUES(3,' EE果冻','EE果冻场',1.5,'2007',2,'北京');
INSERT INTO food VALUES(4,'FF咖啡','FF咖啡场',20,'2002',5,'天津');
INSERT INTO food VALUES(5,'GG奶糖','GG奶糖厂',14,'2003',3,'广东');
		- MariaDB [EXAMPLE]> INSERT INTO food VALUES(1,'AA饼干','AA饼干厂',2.5,'2008',3,'北京');
		Query OK, 1 row affected (0.00 sec)
		
		MariaDB [EXAMPLE]> INSERT INTO food(id,name,company,price,produce_time,validity_time,address) VALUES(2,'CC牛奶','CC牛奶厂',3.5,'2009',1,'河北');
		Query OK, 1 row affected (0.01 sec)
		
		MariaDB [EXAMPLE]> INSERT INTO food VALUES
		    -> (NULL,'EE果冻','EE果冻场',1.5,'2007',2,'北京'),
		    -> (NULL,'FF咖啡','FF咖啡场',20,'2002',5,'天津'),
		    -> (NULL,'GG奶糖','GG奶糖厂',14,'2003',3,'广东');
		Query OK, 3 rows affected (0.00 sec)
		Records: 3  Duplicates: 0  Warnings: 0
		
		MariaDB [EXAMPLE]> select * from food;
		+----+----------+-------------+-------+--------------+---------------+---------+
		| id | name     | company     | price | produce_time | validity_time | address |
		+----+----------+-------------+-------+--------------+---------------+---------+
		|  1 | AA饼干   | AA饼干厂    |   2.5 |         2008 |             3 | 北京    |
		|  2 | CC牛奶   | CC牛奶厂    |   3.5 |         2009 |             1 | 河北    |
		|  3 | EE果冻   | EE果冻场    |   1.5 |         2007 |             2 | 北京    |
		|  4 | FF咖啡   | FF咖啡场    |    20 |         2002 |             5 | 天津    |
		|  5 | GG奶糖   | GG奶糖厂    |    14 |         2003 |             3 | 广东    |
		+----+----------+-------------+-------+--------------+---------------+---------+
		5 rows in set (0.00 sec)
		
		MariaDB [EXAMPLE]> 



	 - 将CC牛奶厂的厂址改为内蒙古，并且价格为3.2
		 - UPDATE food SET address='内蒙古',price=3.2 WHERE name='CC牛奶';
		 - 将厂址在北京的公司的保质期都改为5年
			 - UPDATE food set validity_time=5 where address='北京';
		 - 删除过期食品（2012）
			 - DELETE from food where 2012-produce_time > validity_time;
		 - 删除厂址为北京的食品记录
			 - DELETE FROM food WHERE address='北京';