# Mairadb日志
	- 日志是mairadb重要的组成部分
	- 日志文件记录着mairadb数据库运行期间发生的变化
	- 当数据库遭到意外的损坏时，可以通过日志来查询出错误原因
	- 通过日志进行数据恢复
	- 通过日志还可以查看日常操作错误信息和哪些地方需要进行优化等信息
		- 二进制日志：以二进制文件方式记录了数据库中的操作，不包括查询语句
		- 错误日志：记录Mairadb服务的启动，关闭和运行错误等状态信息
		- 通用查询日志：记录用户登陆和记录查询的信息
		- 慢查询日志：记录执行时间超过指定时间的操作
	-  除了二进制日志外，其他的都是文本文件
	-  日志文件通常存储在mairadb数据库的数据目录下	# /var/lib/mysql/(在/etc/my.cnf文件中定义)
	-  默认情况下只启动了错误日志功能，其他三类日志需要DBA进行设置

	- 日志的开启会降低Mariadb数据库的执行速度
	- 查询操作频繁会记录查询日志和慢查询日志花费时间较多
	- 日志文件存储的空间甚至比数据库文件需要的存储更大



## 二进制日志（除了查询语句，插入删除等语句都会记录在二进制binlog日志中）
	二进制日志也叫做变更日志
		- 主要用来记录数据库的变化情况，通过二进制日志可以查询Mairadb数据库中的操作变化
		- binlog主要俩个作用
			- mysql的主从复制
				- 需要在master端开启binlog，将二进制日志发送给slave端达到主从数据一致
			- 数据恢复

	- 启动和设置二进制日志
		- 通过/etc/my.cnf进行二进制日志开启
		- 需要将log-bin选项加入到my.cnf下的[mysqld]组中
			- log-bin [=DIR\[filename]]		##例子（log-bin = mysql-bin   将logbin日志放到数据目录（/var/lib/mysql/(在/etc/my.cnf文件中定义)）下的mysql-bin文件中）
				- DIR 二进制文件的存储路径
				- log-bin = mysql-bin  #确认是打开状态(mysql-bin是二进制日志的基本名或前缀)
				- 查看binlog日志是否开启
					- show variables like 'log_%'\G
				- 重启（mariadb）服务binlog日志会重新产生一个
				- mysql-bin.000001
				- mysql-bin.index 
					- 存储所有二进制日志文件的清单
			- 注意：
				- 二进制日志与数据库的数据文件最好不要放在同一个磁盘上
				- 这样即使数据文件所在的磁盘损坏，也可以使用另一块盘上的二进制日志恢复数据库文件
	- 查看二进制日志
		- 使用二进制格式可以粗糙查看部分信息
		- 使用mysqlbinlog命令查看mysql-bin.000001文件
			- 语法格式：
				- mysqlbinlog filename.number
			- mysqlbinlog命令将在当前文件下查找指定的二进制日志
			- 因此需要在二进制日志所在目录下运行该命令，否则找不到二进制日志文件

				- mysqlbinlog mysql-bin.000001


	- 常用binlog日志操作命令
		1. 查看所有的binlog日志列表
			- MariaDB [(none)]> show master logs;		##查看所有binlog日志
		2. 查看master状态，最后一个（最新一个）binlog日志的编号名称
			- show master status;
		3. flush刷新log日志，自动产生一个新编号binlog日志文件
			- MariaDB [(none)]> flush logs;			##和重启服务类似
			- MariaDB [(none)]> show master status;
			- MariaDB [(none)]> show master logs;


		- 在mysqldump备份时添加-F选项也可以产生新的binlog日志。


	- 更方便的查询命令
		- pos点
		- show binlog events [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count];
			- IN log_name  指定要查询的binlog文件名（不指定就是第一个）
			- FROM pos：指定从哪个POS起始点开始查起（不指定就是从整个文件首个pos点开始算）
			- LIMIT [offset，] ：偏移量（不指定是0）
			- row_count：查询总条数(不指定就是所有行)


		MariaDB [(none)]> show binlog events in 'mysql-bin.000001'\G


		- 查询最早（第一个）的binlog日志
			- MariaDB [(none)]> show binlog events\G
		- 查询mysql-bin.000002这个文件
			- MariaDB [(none)]> show binlog events in 'mysql-bin.000002'\G

		- 指定查询mysql-bin.000002这个文件，pos点从245查起
			- MariaDB [(none)]> show binlog events in 'mysql-bin.000002' from 245\G
		- 指定查询mysql-bin.000002这个文件，pos点从4查起,查询1条
			- MariaDB [(none)]> show binlog events in 'mysql-bin.000002' from 4 limit 1\G
		- 指定查询mysql-bin.000002这个文件，pos点从4查起,查询5条，偏移量为1（中间隔一个）
			- MariaDB [(none)]> show binlog events in 'mysql-bin.000002' from 4 limit 1,5\G

## 删除二进制日志
	二进制日志信息会存放大量信息，如果长期不清理，将会浪费很多的磁盘空间，所以删除
	1.删除所有二进制日志
		- 使用RESET MASTER语句删除所有二进制日志
			- RESET MASTER
	2. 根据编号删除二进制日志
		- 使用PURGE MASTER LOGS TO 语句删除指定的二进制日志编号之前的日志
			- PURGE MASTER LOGS TO 'filename.number'
			- PURGE MASTER LOGS TO 'mysql-bin.000004'
				- 此时删除编号小于4之前的二进制日志
			- MariaDB [(none)]> PURGE MASTER LOGS TO 'mysql-bin.000008';
	3. 根据创建时间删除二进制日志
		- PURGE MASTER LOGS BEFORE ‘yyyy-mm-dd hh:MM:ss’ 
			- hh代表24小时
			- [root@server ~]# date '+%Y-%m-%d %H:%M:%S'
			- MariaDB [(none)]> PURGE MASTER LOGS BEFORE "2019-01-25 01:40:05";




## 使用二进制日志还原数据库
	- 还原过程
		- 首先使用最近的备份文件来还原数据库
		- 备份之后数据库可能进行了一些更新，可以使用二进制日志来还原
		- 二进制还原命令
			- mysqlbinlog filename.number | mysql -u root -p
				- 利用mysqlbinlog语句读出二进制日志然后mysql语句将这个内容还原到数据库中
		- 注意：
			- 使用mysqlbinlog命令进行还原操作操作时，必须是编号小的先还原


## binlog还原案例
	- 准备工作
		- 创建ops库，创建member表
			- MariaDB [(none)]> CREATE DATABASE ops default charset utf8;
			- MariaDB [ops]> create table member(
			    -> id int(10) unsigned NOT NULL AUTO_INCREMENT,
			    -> name varchar(16) NOT NULL,
			    -> sex enum('m','w') NOT NULL DEFAULT 'm',
			    -> age int(10) unsigned NOT NULL,
			    -> classid char(6) DEFAULT NULL,
			    -> PRIMARY KEY(id)
			    -> ) DEFAULT CHARSET=utf8;
			Query OK, 0 rows affected (0.01 sec)
			
			MariaDB [ops]>



	- 事先插入俩条数据
		- MariaDB [ops]> insert into member VALUES(null,'wanger','m',27,'cl1'),(null,'zhaowu','w',18,'cl2');




	- 场景模拟
		- ops库会在每天凌晨4点进行一次完全备份，写计划任务
			[root@server mysql]# crontab -e	
			0 4 * * * /usr/bin/mysqldump -u root -p -B -F -R -x --master0-data=2 ops | gzip > /opt/backup/ops_$(date +%F).sql.gz		##别写-X，不然一直报XML第一行出错

			[root@servera mysql]# mkdir /opt/backup	##手动备份一次
			[root@servera mysql]# 
			[root@servera mysql]# mysqldump -u root -p -B -F -R -x --master-data=2 ops | gzip > /opt/backup/ops_$(date +%F).sql.gz		##别写-X，不然一直报XML第一行出错
			Enter password: 
			[root@servera mysql]# 

				-B  	指定数据库
				-F	刷新日志（类似重启服务，会生成新的binlog文件）
				-R  	备份存储过程
				-x	锁表
				--master-Data 在备份语句添加CHANGE MASTER语句以及binlog文件位置信息

		- MariaDB [ops]> show master status;

	
	- 早上九点上班，也对需求对数据库进行操作
		- 在表中插入部分数据
		insert into member VALUES(null,'zhang','w',19,'cl3'),(null,'wu','m',28,'cl4'),(null,'zhangsan','w',29,'cl5'),(null,'wugang','m',28,'cl4');


	- 中午又执行了更新操作
		- MariaDB [ops]> update member set name='吴刚' where id=6;
		Query OK, 1 row affected (0.01 sec)
		Rows matched: 1  Changed: 1  Warnings: 0
		
		MariaDB [ops]> update member set name='张三' where id=5;
		Query OK, 1 row affected (0.00 sec)
		Rows matched: 1  Changed: 1  Warnings: 0
		
		MariaDB [ops]> select * from member;



	- 在下午18：00时候，悲剧发生
		- drop database ops;


	- 该您上场啦
		- 备份binlog日志
			- [root@servera mysql]# cp -v mysql-bin.000002 /opt/backup/
		- 刷新log日志
			- MariaDB [(none)]> flush logs;


	- 数据恢复
		- 读取log日志分析
			- MariaDB [(none)]> show binlog events in 'mysql-bin.000002'\G	（找到drop database ops的pos点，视频中是Pos964）

		- 先还原凌晨四点的数据
			- [root@servera backup]# gzip -d ops_2019-01-25.sql.gz		##之前手动备份的一次数据ops_2019-01-25.sql.gz
			- [root@servera backup]# mysql -u root -p -v < ops_2019-01-29.sql	##先恢复备份数据，若出现XML第一行报错，ops_2019-01-25.sql.gz，mysqldump时加了 -X选项应该加-x的
			- 

	- 恢复命令语法格式
		mysqlbinlog mysql-bin.00000X | mysql -u username -p password database

			--start-position=888  起始pos点
			--stop-position=1000	结束pos点
			--start-datetime="2019-1-29 22:01:06"  起始时间点
			--stop-datetime="2019-1-29 22:01:06"  结束时间点

			--databases=sdasda  指定只恢复adasda数据库

			man mysqlbinlog
				-u username
				-p password
				-h host


	1.指定pos结束点进行恢复（部分恢复）	#就是找到事务pos点，然后指定恢复pos点内的事务数据
		mysqlbinlog --stop-position=964 --database=ops /var/lib/mysql/mysql-bin.000002 | mysql -uroot -predhat -v ops		#-v打印输出mysql执行的语句	
	2. 指定pos区间恢复
	3. 单独恢复name=张三，
		mysqlbinlog --start-position=833 --stop-position=937 --database=ops /var/lib/mysql/mysql-bin.000002 | mysql -uroot -predhat -v ops






