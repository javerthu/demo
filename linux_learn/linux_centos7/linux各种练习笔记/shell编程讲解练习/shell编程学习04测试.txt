一、退出与测试
在linux中，每个命令或脚本完成后都会有一个退出状态；
在shell中有一个内部命令test，用于判断语句进行测试一种或者几种状态条件是否成立。
#退出状态，厕所和判断密切相关


二、退出状态：
当命令执行成功后，系统会返回一个退出状态，这个状态由数值标识，判断命令是否正确执行。
若退出状态为0，表示命令执行成功。若为其他数值，则表示运行失败。

##查看状态码  $?

状态码              含义
0                      代表退出成功，执行ok
1-125               执行失败，脚命令，系统或传递参数失败
126                  找到命令但无法执行
127                  没找到命令
128+               命令被系统强制终止


三、测试结构
测试命令用于测试表达式的条件的真假，如果条件为真，返回0。条件为假，返回非0数值。

测试结构语法
第一种：test  expression
expression为表达式，该表达式可以是数字，字符串，文本，文件属性的比较

第二种：[ expression ](中括号两边的空格别忘了，不然报错).
expression为表达式，[ 代表测试启动，[]两边必修有空格，这种方法经常与if,Case,while等语句连用


四、整数比较运算符（主要用于两个值的比较，比较简单）
测试结果：test  "num"   整数比较符号   "num"
或者：[ "num" 整数比较符 "num" ]

常用运算符：-eq（等于）、-ge（大于等于）、-gt（大于）、-le（小于等于）、-lt（小于）、-ne（不等于）
ex:
[root@centos7 ~]# num=15
[root@centos7 ~]# [ '$num' -eq 15];echo $?        #########后面中括号忘了空格
bash: [: missing `]'
2
[root@centos7 ~]# [ '$num' -eq 15 ];echo $?       #########  $变量只能用双引号wtf。（懂了单引号屏蔽所有，双引号不屏蔽$。在这即使不用引号也可以）
bash: [: $num: integer expression expected
2
[root@centos7 ~]# [ "$num" -eq 15 ];echo $?
0
[root@centos7 ~]# [ "$num" -gt 20 ];echo $?
1
[root@centos7 ~]# [ "$num" -lt 20 ];echo $?
0
[root@centos7 ~]# num1=15              
[root@centos7 ~]# num2=20
[root@centos7 ~]# [ "$num1" -eq "$num2" ];echo $?
1
##整数比较运算符不适用于浮点数的比较
[root@centos7 ~]# [ 1.5 -eq 1.5 ];echo $?
bash: [: 1.5: integer expression expected
2



五、字符串运算符
可以用来测试字符串是否为空，两个字符串是否相等或不相等。
主要运来测试用户输入是否为空或者判断比较字符串变量。

字符串运算符总共有5种
##字符串运算符只能用test，不能用[]这种格式
##两个字符串变量比较也需要用双引号
str		######测试字符串是否不为空，不为空返回0，否则返回非0，和-n参数一样
-n str 	 	######测试字符串是否不为空（字符串长度），不为空返回0，否则返回非0
-z  str  		######测试字符串是否为空，为空返回0，否则返回非0
str1 = str2 	#######判断字符串是否相等，相等返回0，否则返回非0
str1 ！= str2 	#######判断字符串是否不相等，不相等返回0，否则返回非0

########运算符号如：=、！=两边必须加空格
ex:
[root@centos7 ~]# str=''
[root@centos7 ~]# echo $str

[root@centos7 ~]# test "$str";echo $?
1
[root@centos7 ~]# test -n "$str";echo $?
1
[root@centos7 ~]# test -z "$str";echo $?
0

[root@centos7 ~]# str='aa'
[root@centos7 ~]# echo $str
aa
[root@centos7 ~]# test "$str";echo $?
0
[root@centos7 ~]# test -n "$str";echo $?
0
[root@centos7 ~]# test -z "$str";echo $?
1

[root@centos7 ~]# str1='aa'
[root@centos7 ~]# str2='bb'
[root@centos7 ~]# echo $str1
aa
[root@centos7 ~]# echo $str2
bb
[root@centos7 ~]# test "$str1"="$str2"
[root@centos7 ~]# test "$str1"="$str2";echo $?
0
[root@centos7 ~]# test "$str1"!="$str2";echo $?
0
[root@centos7 ~]# test "$str1"=="$str2";echo $?
0
[root@centos7 ~]# echo $str1
aa
[root@centos7 ~]# echo $str2
bb
[root@centos7 ~]# test "$str1" = "$str2";echo $?
1
[root@centos7 ~]# test "$str1" != "$str2";echo $?
0


[root@centos7 ~]# str1='aa'
[root@centos7 ~]# str2='bb'
[root@centos7 ~]# echo $str1
aa
[root@centos7 ~]# echo $str2
bb
[root@centos7 ~]# test "$str1"="$str2"
[root@centos7 ~]# test "$str1"="$str2";echo $?     ########等号两边没加空格返回结果错误
0
[root@centos7 ~]# test "$str1"!="$str2";echo $?     ########等号两边没加空格返回结果都为0
0
[root@centos7 ~]# test "$str1" = "$str2";echo $?   ########等号两边加空格返回结果正常
1
[root@centos7 ~]# test "$str1" != "$str2";echo $?
0
[root@centos7 ~]# [ "$str1" = "str2" ];echo $?        #########不是说不能用[]吗，咋到这又行了..
1
[root@centos7 ~]# [ "$str1" != "str2" ];echo $?
0


[root@centos7 ~]# num='007'                             #####变量赋值可以当做整数或字符串
[root@centos7 ~]# echo $num
007
[root@centos7 ~]# [ "$num" -eq "7" ];echo $?     #####当做整数比较
0
[root@centos7 ~]# [ "$num" -eq 7 ];echo $?
0
[root@centos7 ~]# [ "$num" = 7 ];echo $?
1
[root@centos7 ~]# [ "$num" = "7" ];echo $?
1
[root@centos7 ~]# [ "$num" = "007" ];echo $?      #####当做字符串比较
0
[root@centos7 ~]# [ "$num" = 007 ];echo $?
0
[root@centos7 ~]# [ "$num" -eq 007 ];echo $?
0
[root@centos7 ~]# [ "$num" -eq "007" ];echo $?
0
#######晕了什么JB东西


六、文件操作符
可以完成测试文件的各种操作
格式：test  文件操作符(file_operator)   file
或：[ 文件操作符(file_operator)   file ]

##常用文件操作符
-d   file     ###测试file是否是目录
-e   file     ###测试file是否存在
-f    file     ###测试file是否是普通文件
-r    file     ###测试file是否可读
-s    file     ###测试file是否不为空
-w   file     ###测试file是否可写
-x    file     ###测试file是否可执行
-h    file     ###测试file是否是连接文件

ex：
[root@centos7 ~]# ls
anaconda-ks.cfg  Documents  initial-setup-ks.cfg  Pictures  py3        Videos
Desktop          Downloads  Music                 Public    Templates
[root@centos7 ~]# [ -d initial-setup-ks.cfg ];echo $?
1
[root@centos7 ~]# [ -f initial-setup-ks.cfg ];echo $?
0
[root@centos7 ~]# [ -r initial-setup-ks.cfg ];echo $?
0
[root@centos7 ~]# [ -w initial-setup-ks.cfg ];echo $?
0
[root@centos7 ~]# [ -x initial-setup-ks.cfg ];echo $?
1
[root@centos7 ~]# [ -e initial-setup-ks.cfg ] && echo "YES" || echo "NO";echo $?      ####判断文件是否存在，存在打印YES，不存在打印NO
YES
0
[root@centos7 ~]# [ -e initial-setup-ks.cfgs ] && echo "YES" || echo "NO";echo $?
NO
0


七、逻辑运算符
！  expression       	 	##如果expression为假，测试结果为真（非）
expression1 -a expression2      	##都真为真（与）
expression1 -o expression2      	##有真为真（或）

exp1 -a  exp2  -a exp3  -o  exp4
(执行顺序从左到右，若-o前为真，则不用判断exp4，返回真。若前面为假才判断exp4)

ex:
[root@centos7 ~]# [ -w initial-setup-ks.cfg -a -r initial-setup-ks.cfg ];echo $?    	#####文件可读，可写。真与真
0
[root@centos7 ~]# [ ! -w initial-setup-ks.cfg -a -r initial-setup-ks.cfg ];echo $?    	#####假与真
1
[root@centos7 ~]# [ ! -w initial-setup-ks.cfg -o -r initial-setup-ks.cfg ];echo $?    	#####假或真
0
[root@centos7 ~]# [ ! -w initial-setup-ks.cfg -o ! -r initial-setup-ks.cfg ];echo $?   	#####假或假
1
[root@centos7 ~]# [ -w initial-setup-ks.cfg -a -r initial-setup-ks.cfg -a -x initial-setup-ks.cfg ];echo $?     #####真与真与假
1































